"""
Generated by CHARMM-GUI (http://www.charmm-gui.org)

addBond4LP.py

This program is to generate NAMD PSF file with a bond for halogen sigma-hole particle.

Correspondance: jul316@lehigh.edu or wonpil@lehigh.edu
Last update: June 10, 2019
"""

from __future__ import print_function
import sys
import os
import math

if len(sys.argv) != 3:
    print("useage: addBond4LP.py psfFile outPSF")
    exit()

psfFile = open(sys.argv[1], 'r')
fout = open(sys.argv[2], 'w')

lp_check = False
buffer = []
bonds = []

for line in psfFile:
    line = line.rstrip()

    if line.upper().endswith('BONDS'):
        for item in buffer:
            fout.write(item + "\n")
        buffer = []
        nbond = int(line.strip().split()[0])
        nbondline = int(math.ceil(nbond / 4.0))
        for i in range(nbondline):
            line = psfFile.next()
            segments = line.split()

            for i in range(len(segments)/2):
                atom1 = int(segments[2*i+0])
                atom2 = int(segments[2*i+1])
                bonds.append([atom1, atom2])

    elif line.upper().endswith('NUMLPH'):
        buffer.append(line)
        segments = line.strip().split()
        numlp = int(segments[0])
        numlph = int(segments[1])
        lp_info = []
        if numlp: lp_check = True
        for i in range(numlp):
            line = psfFile.next()
            buffer.append(line.rstrip())
            segments = line.strip().split()

            nhost    = int(segments[0])
            lp_index = int(segments[1])

            lp_info.append({'nhost': nhost, 'lp_index': lp_index})

        nlpline = int(math.ceil(numlph / 8.0))
        lp_atoms = []
        for i in range(nlpline):
            line = psfFile.next()
            buffer.append(line.rstrip())
            lp_atoms += [ int(x) for x in line.strip().split() ]

        for lp in lp_info:
            nhost = lp['nhost']
            lp_index = lp['lp_index']
            lp_hosts = lp_atoms[lp_index-1:lp_index+nhost]
            if [lp_hosts[0], lp_hosts[1]] in bonds: continue
            if [lp_hosts[1], lp_hosts[0]] in bonds: continue
            bonds.append([lp_hosts[0], lp_hosts[1]])
            nbond += 1

    else:
        buffer.append(line)

fout.write("%10d !NBOND: bonds\n" % nbond)
for i, bond in enumerate(bonds):
    fout.write("%10d%10d" % (bond[0], bond[1]))
    if (i+1) % 4 == 0: fout.write("\n")
if len(bonds) % 4 != 0: fout.write("\n")

for item in buffer:
    fout.write(item + "\n")

print(lp_check)

